// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entity"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entityfield"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/predicate"
)

// EntityFieldUpdate is the builder for updating EntityField entities.
type EntityFieldUpdate struct {
	config
	hooks    []Hook
	mutation *EntityFieldMutation
}

// Where appends a list predicates to the EntityFieldUpdate builder.
func (efu *EntityFieldUpdate) Where(ps ...predicate.EntityField) *EntityFieldUpdate {
	efu.mutation.Where(ps...)
	return efu
}

// SetUpdatedAt sets the "updated_at" field.
func (efu *EntityFieldUpdate) SetUpdatedAt(t time.Time) *EntityFieldUpdate {
	efu.mutation.SetUpdatedAt(t)
	return efu
}

// SetName sets the "name" field.
func (efu *EntityFieldUpdate) SetName(s string) *EntityFieldUpdate {
	efu.mutation.SetName(s)
	return efu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableName(s *string) *EntityFieldUpdate {
	if s != nil {
		efu.SetName(*s)
	}
	return efu
}

// SetDescription sets the "description" field.
func (efu *EntityFieldUpdate) SetDescription(s string) *EntityFieldUpdate {
	efu.mutation.SetDescription(s)
	return efu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableDescription(s *string) *EntityFieldUpdate {
	if s != nil {
		efu.SetDescription(*s)
	}
	return efu
}

// ClearDescription clears the value of the "description" field.
func (efu *EntityFieldUpdate) ClearDescription() *EntityFieldUpdate {
	efu.mutation.ClearDescription()
	return efu
}

// SetType sets the "type" field.
func (efu *EntityFieldUpdate) SetType(e entityfield.Type) *EntityFieldUpdate {
	efu.mutation.SetType(e)
	return efu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableType(e *entityfield.Type) *EntityFieldUpdate {
	if e != nil {
		efu.SetType(*e)
	}
	return efu
}

// SetTextValue sets the "text_value" field.
func (efu *EntityFieldUpdate) SetTextValue(s string) *EntityFieldUpdate {
	efu.mutation.SetTextValue(s)
	return efu
}

// SetNillableTextValue sets the "text_value" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableTextValue(s *string) *EntityFieldUpdate {
	if s != nil {
		efu.SetTextValue(*s)
	}
	return efu
}

// ClearTextValue clears the value of the "text_value" field.
func (efu *EntityFieldUpdate) ClearTextValue() *EntityFieldUpdate {
	efu.mutation.ClearTextValue()
	return efu
}

// SetNumberValue sets the "number_value" field.
func (efu *EntityFieldUpdate) SetNumberValue(i int) *EntityFieldUpdate {
	efu.mutation.ResetNumberValue()
	efu.mutation.SetNumberValue(i)
	return efu
}

// SetNillableNumberValue sets the "number_value" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableNumberValue(i *int) *EntityFieldUpdate {
	if i != nil {
		efu.SetNumberValue(*i)
	}
	return efu
}

// AddNumberValue adds i to the "number_value" field.
func (efu *EntityFieldUpdate) AddNumberValue(i int) *EntityFieldUpdate {
	efu.mutation.AddNumberValue(i)
	return efu
}

// ClearNumberValue clears the value of the "number_value" field.
func (efu *EntityFieldUpdate) ClearNumberValue() *EntityFieldUpdate {
	efu.mutation.ClearNumberValue()
	return efu
}

// SetBooleanValue sets the "boolean_value" field.
func (efu *EntityFieldUpdate) SetBooleanValue(b bool) *EntityFieldUpdate {
	efu.mutation.SetBooleanValue(b)
	return efu
}

// SetNillableBooleanValue sets the "boolean_value" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableBooleanValue(b *bool) *EntityFieldUpdate {
	if b != nil {
		efu.SetBooleanValue(*b)
	}
	return efu
}

// SetTimeValue sets the "time_value" field.
func (efu *EntityFieldUpdate) SetTimeValue(t time.Time) *EntityFieldUpdate {
	efu.mutation.SetTimeValue(t)
	return efu
}

// SetNillableTimeValue sets the "time_value" field if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableTimeValue(t *time.Time) *EntityFieldUpdate {
	if t != nil {
		efu.SetTimeValue(*t)
	}
	return efu
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (efu *EntityFieldUpdate) SetEntityID(id uuid.UUID) *EntityFieldUpdate {
	efu.mutation.SetEntityID(id)
	return efu
}

// SetNillableEntityID sets the "entity" edge to the Entity entity by ID if the given value is not nil.
func (efu *EntityFieldUpdate) SetNillableEntityID(id *uuid.UUID) *EntityFieldUpdate {
	if id != nil {
		efu = efu.SetEntityID(*id)
	}
	return efu
}

// SetEntity sets the "entity" edge to the Entity entity.
func (efu *EntityFieldUpdate) SetEntity(e *Entity) *EntityFieldUpdate {
	return efu.SetEntityID(e.ID)
}

// Mutation returns the EntityFieldMutation object of the builder.
func (efu *EntityFieldUpdate) Mutation() *EntityFieldMutation {
	return efu.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (efu *EntityFieldUpdate) ClearEntity() *EntityFieldUpdate {
	efu.mutation.ClearEntity()
	return efu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (efu *EntityFieldUpdate) Save(ctx context.Context) (int, error) {
	efu.defaults()
	return withHooks(ctx, efu.sqlSave, efu.mutation, efu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (efu *EntityFieldUpdate) SaveX(ctx context.Context) int {
	affected, err := efu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (efu *EntityFieldUpdate) Exec(ctx context.Context) error {
	_, err := efu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efu *EntityFieldUpdate) ExecX(ctx context.Context) {
	if err := efu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (efu *EntityFieldUpdate) defaults() {
	if _, ok := efu.mutation.UpdatedAt(); !ok {
		v := entityfield.UpdateDefaultUpdatedAt()
		efu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efu *EntityFieldUpdate) check() error {
	if v, ok := efu.mutation.Name(); ok {
		if err := entityfield.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntityField.name": %w`, err)}
		}
	}
	if v, ok := efu.mutation.Description(); ok {
		if err := entityfield.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "EntityField.description": %w`, err)}
		}
	}
	if v, ok := efu.mutation.GetType(); ok {
		if err := entityfield.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "EntityField.type": %w`, err)}
		}
	}
	if v, ok := efu.mutation.TextValue(); ok {
		if err := entityfield.TextValueValidator(v); err != nil {
			return &ValidationError{Name: "text_value", err: fmt.Errorf(`ent: validator failed for field "EntityField.text_value": %w`, err)}
		}
	}
	return nil
}

func (efu *EntityFieldUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := efu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entityfield.Table, entityfield.Columns, sqlgraph.NewFieldSpec(entityfield.FieldID, field.TypeUUID))
	if ps := efu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efu.mutation.UpdatedAt(); ok {
		_spec.SetField(entityfield.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := efu.mutation.Name(); ok {
		_spec.SetField(entityfield.FieldName, field.TypeString, value)
	}
	if value, ok := efu.mutation.Description(); ok {
		_spec.SetField(entityfield.FieldDescription, field.TypeString, value)
	}
	if efu.mutation.DescriptionCleared() {
		_spec.ClearField(entityfield.FieldDescription, field.TypeString)
	}
	if value, ok := efu.mutation.GetType(); ok {
		_spec.SetField(entityfield.FieldType, field.TypeEnum, value)
	}
	if value, ok := efu.mutation.TextValue(); ok {
		_spec.SetField(entityfield.FieldTextValue, field.TypeString, value)
	}
	if efu.mutation.TextValueCleared() {
		_spec.ClearField(entityfield.FieldTextValue, field.TypeString)
	}
	if value, ok := efu.mutation.NumberValue(); ok {
		_spec.SetField(entityfield.FieldNumberValue, field.TypeInt, value)
	}
	if value, ok := efu.mutation.AddedNumberValue(); ok {
		_spec.AddField(entityfield.FieldNumberValue, field.TypeInt, value)
	}
	if efu.mutation.NumberValueCleared() {
		_spec.ClearField(entityfield.FieldNumberValue, field.TypeInt)
	}
	if value, ok := efu.mutation.BooleanValue(); ok {
		_spec.SetField(entityfield.FieldBooleanValue, field.TypeBool, value)
	}
	if value, ok := efu.mutation.TimeValue(); ok {
		_spec.SetField(entityfield.FieldTimeValue, field.TypeTime, value)
	}
	if efu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityfield.EntityTable,
			Columns: []string{entityfield.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityfield.EntityTable,
			Columns: []string{entityfield.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, efu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	efu.mutation.done = true
	return n, nil
}

// EntityFieldUpdateOne is the builder for updating a single EntityField entity.
type EntityFieldUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityFieldMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (efuo *EntityFieldUpdateOne) SetUpdatedAt(t time.Time) *EntityFieldUpdateOne {
	efuo.mutation.SetUpdatedAt(t)
	return efuo
}

// SetName sets the "name" field.
func (efuo *EntityFieldUpdateOne) SetName(s string) *EntityFieldUpdateOne {
	efuo.mutation.SetName(s)
	return efuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableName(s *string) *EntityFieldUpdateOne {
	if s != nil {
		efuo.SetName(*s)
	}
	return efuo
}

// SetDescription sets the "description" field.
func (efuo *EntityFieldUpdateOne) SetDescription(s string) *EntityFieldUpdateOne {
	efuo.mutation.SetDescription(s)
	return efuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableDescription(s *string) *EntityFieldUpdateOne {
	if s != nil {
		efuo.SetDescription(*s)
	}
	return efuo
}

// ClearDescription clears the value of the "description" field.
func (efuo *EntityFieldUpdateOne) ClearDescription() *EntityFieldUpdateOne {
	efuo.mutation.ClearDescription()
	return efuo
}

// SetType sets the "type" field.
func (efuo *EntityFieldUpdateOne) SetType(e entityfield.Type) *EntityFieldUpdateOne {
	efuo.mutation.SetType(e)
	return efuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableType(e *entityfield.Type) *EntityFieldUpdateOne {
	if e != nil {
		efuo.SetType(*e)
	}
	return efuo
}

// SetTextValue sets the "text_value" field.
func (efuo *EntityFieldUpdateOne) SetTextValue(s string) *EntityFieldUpdateOne {
	efuo.mutation.SetTextValue(s)
	return efuo
}

// SetNillableTextValue sets the "text_value" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableTextValue(s *string) *EntityFieldUpdateOne {
	if s != nil {
		efuo.SetTextValue(*s)
	}
	return efuo
}

// ClearTextValue clears the value of the "text_value" field.
func (efuo *EntityFieldUpdateOne) ClearTextValue() *EntityFieldUpdateOne {
	efuo.mutation.ClearTextValue()
	return efuo
}

// SetNumberValue sets the "number_value" field.
func (efuo *EntityFieldUpdateOne) SetNumberValue(i int) *EntityFieldUpdateOne {
	efuo.mutation.ResetNumberValue()
	efuo.mutation.SetNumberValue(i)
	return efuo
}

// SetNillableNumberValue sets the "number_value" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableNumberValue(i *int) *EntityFieldUpdateOne {
	if i != nil {
		efuo.SetNumberValue(*i)
	}
	return efuo
}

// AddNumberValue adds i to the "number_value" field.
func (efuo *EntityFieldUpdateOne) AddNumberValue(i int) *EntityFieldUpdateOne {
	efuo.mutation.AddNumberValue(i)
	return efuo
}

// ClearNumberValue clears the value of the "number_value" field.
func (efuo *EntityFieldUpdateOne) ClearNumberValue() *EntityFieldUpdateOne {
	efuo.mutation.ClearNumberValue()
	return efuo
}

// SetBooleanValue sets the "boolean_value" field.
func (efuo *EntityFieldUpdateOne) SetBooleanValue(b bool) *EntityFieldUpdateOne {
	efuo.mutation.SetBooleanValue(b)
	return efuo
}

// SetNillableBooleanValue sets the "boolean_value" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableBooleanValue(b *bool) *EntityFieldUpdateOne {
	if b != nil {
		efuo.SetBooleanValue(*b)
	}
	return efuo
}

// SetTimeValue sets the "time_value" field.
func (efuo *EntityFieldUpdateOne) SetTimeValue(t time.Time) *EntityFieldUpdateOne {
	efuo.mutation.SetTimeValue(t)
	return efuo
}

// SetNillableTimeValue sets the "time_value" field if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableTimeValue(t *time.Time) *EntityFieldUpdateOne {
	if t != nil {
		efuo.SetTimeValue(*t)
	}
	return efuo
}

// SetEntityID sets the "entity" edge to the Entity entity by ID.
func (efuo *EntityFieldUpdateOne) SetEntityID(id uuid.UUID) *EntityFieldUpdateOne {
	efuo.mutation.SetEntityID(id)
	return efuo
}

// SetNillableEntityID sets the "entity" edge to the Entity entity by ID if the given value is not nil.
func (efuo *EntityFieldUpdateOne) SetNillableEntityID(id *uuid.UUID) *EntityFieldUpdateOne {
	if id != nil {
		efuo = efuo.SetEntityID(*id)
	}
	return efuo
}

// SetEntity sets the "entity" edge to the Entity entity.
func (efuo *EntityFieldUpdateOne) SetEntity(e *Entity) *EntityFieldUpdateOne {
	return efuo.SetEntityID(e.ID)
}

// Mutation returns the EntityFieldMutation object of the builder.
func (efuo *EntityFieldUpdateOne) Mutation() *EntityFieldMutation {
	return efuo.mutation
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (efuo *EntityFieldUpdateOne) ClearEntity() *EntityFieldUpdateOne {
	efuo.mutation.ClearEntity()
	return efuo
}

// Where appends a list predicates to the EntityFieldUpdate builder.
func (efuo *EntityFieldUpdateOne) Where(ps ...predicate.EntityField) *EntityFieldUpdateOne {
	efuo.mutation.Where(ps...)
	return efuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (efuo *EntityFieldUpdateOne) Select(field string, fields ...string) *EntityFieldUpdateOne {
	efuo.fields = append([]string{field}, fields...)
	return efuo
}

// Save executes the query and returns the updated EntityField entity.
func (efuo *EntityFieldUpdateOne) Save(ctx context.Context) (*EntityField, error) {
	efuo.defaults()
	return withHooks(ctx, efuo.sqlSave, efuo.mutation, efuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (efuo *EntityFieldUpdateOne) SaveX(ctx context.Context) *EntityField {
	node, err := efuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (efuo *EntityFieldUpdateOne) Exec(ctx context.Context) error {
	_, err := efuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efuo *EntityFieldUpdateOne) ExecX(ctx context.Context) {
	if err := efuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (efuo *EntityFieldUpdateOne) defaults() {
	if _, ok := efuo.mutation.UpdatedAt(); !ok {
		v := entityfield.UpdateDefaultUpdatedAt()
		efuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efuo *EntityFieldUpdateOne) check() error {
	if v, ok := efuo.mutation.Name(); ok {
		if err := entityfield.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntityField.name": %w`, err)}
		}
	}
	if v, ok := efuo.mutation.Description(); ok {
		if err := entityfield.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "EntityField.description": %w`, err)}
		}
	}
	if v, ok := efuo.mutation.GetType(); ok {
		if err := entityfield.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "EntityField.type": %w`, err)}
		}
	}
	if v, ok := efuo.mutation.TextValue(); ok {
		if err := entityfield.TextValueValidator(v); err != nil {
			return &ValidationError{Name: "text_value", err: fmt.Errorf(`ent: validator failed for field "EntityField.text_value": %w`, err)}
		}
	}
	return nil
}

func (efuo *EntityFieldUpdateOne) sqlSave(ctx context.Context) (_node *EntityField, err error) {
	if err := efuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entityfield.Table, entityfield.Columns, sqlgraph.NewFieldSpec(entityfield.FieldID, field.TypeUUID))
	id, ok := efuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntityField.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := efuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entityfield.FieldID)
		for _, f := range fields {
			if !entityfield.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entityfield.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := efuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entityfield.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := efuo.mutation.Name(); ok {
		_spec.SetField(entityfield.FieldName, field.TypeString, value)
	}
	if value, ok := efuo.mutation.Description(); ok {
		_spec.SetField(entityfield.FieldDescription, field.TypeString, value)
	}
	if efuo.mutation.DescriptionCleared() {
		_spec.ClearField(entityfield.FieldDescription, field.TypeString)
	}
	if value, ok := efuo.mutation.GetType(); ok {
		_spec.SetField(entityfield.FieldType, field.TypeEnum, value)
	}
	if value, ok := efuo.mutation.TextValue(); ok {
		_spec.SetField(entityfield.FieldTextValue, field.TypeString, value)
	}
	if efuo.mutation.TextValueCleared() {
		_spec.ClearField(entityfield.FieldTextValue, field.TypeString)
	}
	if value, ok := efuo.mutation.NumberValue(); ok {
		_spec.SetField(entityfield.FieldNumberValue, field.TypeInt, value)
	}
	if value, ok := efuo.mutation.AddedNumberValue(); ok {
		_spec.AddField(entityfield.FieldNumberValue, field.TypeInt, value)
	}
	if efuo.mutation.NumberValueCleared() {
		_spec.ClearField(entityfield.FieldNumberValue, field.TypeInt)
	}
	if value, ok := efuo.mutation.BooleanValue(); ok {
		_spec.SetField(entityfield.FieldBooleanValue, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.TimeValue(); ok {
		_spec.SetField(entityfield.FieldTimeValue, field.TypeTime, value)
	}
	if efuo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityfield.EntityTable,
			Columns: []string{entityfield.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entityfield.EntityTable,
			Columns: []string{entityfield.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntityField{config: efuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, efuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityfield.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	efuo.mutation.done = true
	return _node, nil
}
