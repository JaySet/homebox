// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entity"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/entitytype"
	"github.com/sysadminsmedia/homebox/backend/internal/data/ent/group"
)

// EntityTypeCreate is the builder for creating a EntityType entity.
type EntityTypeCreate struct {
	config
	mutation *EntityTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (etc *EntityTypeCreate) SetCreatedAt(t time.Time) *EntityTypeCreate {
	etc.mutation.SetCreatedAt(t)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableCreatedAt(t *time.Time) *EntityTypeCreate {
	if t != nil {
		etc.SetCreatedAt(*t)
	}
	return etc
}

// SetUpdatedAt sets the "updated_at" field.
func (etc *EntityTypeCreate) SetUpdatedAt(t time.Time) *EntityTypeCreate {
	etc.mutation.SetUpdatedAt(t)
	return etc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableUpdatedAt(t *time.Time) *EntityTypeCreate {
	if t != nil {
		etc.SetUpdatedAt(*t)
	}
	return etc
}

// SetName sets the "name" field.
func (etc *EntityTypeCreate) SetName(s string) *EntityTypeCreate {
	etc.mutation.SetName(s)
	return etc
}

// SetDescription sets the "description" field.
func (etc *EntityTypeCreate) SetDescription(s string) *EntityTypeCreate {
	etc.mutation.SetDescription(s)
	return etc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableDescription(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetDescription(*s)
	}
	return etc
}

// SetIcon sets the "icon" field.
func (etc *EntityTypeCreate) SetIcon(s string) *EntityTypeCreate {
	etc.mutation.SetIcon(s)
	return etc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableIcon(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetIcon(*s)
	}
	return etc
}

// SetColor sets the "color" field.
func (etc *EntityTypeCreate) SetColor(s string) *EntityTypeCreate {
	etc.mutation.SetColor(s)
	return etc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableColor(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetColor(*s)
	}
	return etc
}

// SetIsLocation sets the "is_location" field.
func (etc *EntityTypeCreate) SetIsLocation(b bool) *EntityTypeCreate {
	etc.mutation.SetIsLocation(b)
	return etc
}

// SetNillableIsLocation sets the "is_location" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableIsLocation(b *bool) *EntityTypeCreate {
	if b != nil {
		etc.SetIsLocation(*b)
	}
	return etc
}

// SetID sets the "id" field.
func (etc *EntityTypeCreate) SetID(u uuid.UUID) *EntityTypeCreate {
	etc.mutation.SetID(u)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableID(u *uuid.UUID) *EntityTypeCreate {
	if u != nil {
		etc.SetID(*u)
	}
	return etc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (etc *EntityTypeCreate) SetGroupID(id uuid.UUID) *EntityTypeCreate {
	etc.mutation.SetGroupID(id)
	return etc
}

// SetGroup sets the "group" edge to the Group entity.
func (etc *EntityTypeCreate) SetGroup(g *Group) *EntityTypeCreate {
	return etc.SetGroupID(g.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (etc *EntityTypeCreate) AddEntityIDs(ids ...uuid.UUID) *EntityTypeCreate {
	etc.mutation.AddEntityIDs(ids...)
	return etc
}

// AddEntities adds the "entities" edges to the Entity entity.
func (etc *EntityTypeCreate) AddEntities(e ...*Entity) *EntityTypeCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etc.AddEntityIDs(ids...)
}

// Mutation returns the EntityTypeMutation object of the builder.
func (etc *EntityTypeCreate) Mutation() *EntityTypeMutation {
	return etc.mutation
}

// Save creates the EntityType in the database.
func (etc *EntityTypeCreate) Save(ctx context.Context) (*EntityType, error) {
	etc.defaults()
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EntityTypeCreate) SaveX(ctx context.Context) *EntityType {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EntityTypeCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EntityTypeCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EntityTypeCreate) defaults() {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		v := entitytype.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		v := entitytype.DefaultUpdatedAt()
		etc.mutation.SetUpdatedAt(v)
	}
	if _, ok := etc.mutation.IsLocation(); !ok {
		v := entitytype.DefaultIsLocation
		etc.mutation.SetIsLocation(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		v := entitytype.DefaultID()
		etc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *EntityTypeCreate) check() error {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntityType.created_at"`)}
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EntityType.updated_at"`)}
	}
	if _, ok := etc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EntityType.name"`)}
	}
	if v, ok := etc.mutation.Name(); ok {
		if err := entitytype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EntityType.name": %w`, err)}
		}
	}
	if v, ok := etc.mutation.Description(); ok {
		if err := entitytype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "EntityType.description": %w`, err)}
		}
	}
	if v, ok := etc.mutation.Icon(); ok {
		if err := entitytype.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "EntityType.icon": %w`, err)}
		}
	}
	if v, ok := etc.mutation.Color(); ok {
		if err := entitytype.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "EntityType.color": %w`, err)}
		}
	}
	if _, ok := etc.mutation.IsLocation(); !ok {
		return &ValidationError{Name: "is_location", err: errors.New(`ent: missing required field "EntityType.is_location"`)}
	}
	if len(etc.mutation.GroupIDs()) == 0 {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "EntityType.group"`)}
	}
	return nil
}

func (etc *EntityTypeCreate) sqlSave(ctx context.Context) (*EntityType, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EntityTypeCreate) createSpec() (*EntityType, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityType{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(entitytype.Table, sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeUUID))
	)
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.SetField(entitytype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := etc.mutation.UpdatedAt(); ok {
		_spec.SetField(entitytype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := etc.mutation.Name(); ok {
		_spec.SetField(entitytype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := etc.mutation.Description(); ok {
		_spec.SetField(entitytype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := etc.mutation.Icon(); ok {
		_spec.SetField(entitytype.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := etc.mutation.Color(); ok {
		_spec.SetField(entitytype.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := etc.mutation.IsLocation(); ok {
		_spec.SetField(entitytype.FieldIsLocation, field.TypeBool, value)
		_node.IsLocation = value
	}
	if nodes := etc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.GroupTable,
			Columns: []string{entitytype.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_entity_types = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntityTypeCreateBulk is the builder for creating many EntityType entities in bulk.
type EntityTypeCreateBulk struct {
	config
	err      error
	builders []*EntityTypeCreate
}

// Save creates the EntityType entities in the database.
func (etcb *EntityTypeCreateBulk) Save(ctx context.Context) ([]*EntityType, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EntityType, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EntityTypeCreateBulk) SaveX(ctx context.Context) []*EntityType {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EntityTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EntityTypeCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
